name: CI - Validate Setup

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly to catch upstream issues
    - cron: '0 0 * * 0'

jobs:
  validate-docker-compose:
    name: Validate Docker Compose
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create dummy .env file
        run: |
          cp .env.example .env
          # Replace placeholders with dummy values for validation
          sed -i 's/your_secure_root_password_here/dummy_root_password_123/g' .env
          sed -i 's/your_secure_password_here/dummy_password_123/g' .env
          sed -i 's/your_secure_db_password_here/dummy_db_password_123/g' .env
          sed -i 's/your_admin_password_here/dummy_admin_password_123/g' .env
          sed -i 's/admin@example.com/test@example.com/g' .env
          sed -i 's/https:\/\/your-domain.com/https:\/\/test.example.com/g' .env
          sed -i 's/your_google_drive_folder_id_here/dummy_folder_id_12345/g' .env
          sed -i 's/your_cloudflare_tunnel_token_here/dummy_tunnel_token_12345/g' .env

      - name: Create dummy Google credentials
        run: |
          cat > google-credentials.json << 'EOF'
          {
            "type": "service_account",
            "project_id": "test-project",
            "private_key_id": "dummy_key_id",
            "private_key": "-----BEGIN PRIVATE KEY-----\nDUMMY\n-----END PRIVATE KEY-----\n",
            "client_email": "test@test-project.iam.gserviceaccount.com",
            "client_id": "123456789",
            "auth_uri": "https://accounts.google.com/o/oauth2/auth",
            "token_uri": "https://oauth2.googleapis.com/token",
            "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs"
          }
          EOF

      - name: Validate docker-compose.yml syntax
        run: docker compose config

      - name: Build backup service image
        run: docker compose build db_backup

      - name: Pull all images (except built ones)
        run: docker compose pull --ignore-buildable
        continue-on-error: true

      - name: Check all services are defined correctly
        run: |
          echo "Checking all services..."
          docker compose config --services | sort

          # Expected services
          EXPECTED="adminer cloudflared database db_backup limesurvey netdata watchtower"
          ACTUAL=$(docker compose config --services | sort | tr '\n' ' ')

          if [ "$ACTUAL" != "$EXPECTED " ]; then
            echo "ERROR: Services mismatch"
            echo "Expected: $EXPECTED"
            echo "Actual: $ACTUAL"
            exit 1
          fi

          echo "✓ All services defined correctly"

  validate-scripts:
    name: Validate Shell Scripts
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install shellcheck
        run: sudo apt-get update && sudo apt-get install -y shellcheck

      - name: Check shell scripts with shellcheck
        run: |
          echo "Checking shell scripts..."
          find . -name "*.sh" -type f | while read -r script; do
            echo "Checking: $script"
            shellcheck -x "$script" || exit 1
          done
          echo "✓ All shell scripts passed shellcheck"

      - name: Check scripts are executable
        run: |
          echo "Checking script permissions..."

          SCRIPTS=(
            "scripts/restore-db.sh"
            "scripts/restore-on-boot.sh"
            "scripts/watchdog/health-monitor.sh"
            "scripts/pre-commit-check.sh"
            "backup-service/entrypoint.sh"
          )

          for script in "${SCRIPTS[@]}"; do
            if [ ! -x "$script" ]; then
              echo "ERROR: $script is not executable"
              exit 1
            fi
            echo "✓ $script is executable"
          done

  validate-python:
    name: Validate Python Scripts
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r backup-service/requirements.txt
          pip install pylint

      - name: Check Python syntax
        run: |
          python -m py_compile backup-service/backup.py
          echo "✓ Python syntax is valid"

      - name: Run pylint
        run: |
          pylint backup-service/backup.py --disable=C0103,C0114,C0115,C0116 || true
        continue-on-error: true

  validate-documentation:
    name: Validate Documentation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for broken markdown links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          config-file: '.github/markdown-link-check-config.json'
          use-quiet-mode: 'yes'
        continue-on-error: true

      - name: Validate markdown syntax
        run: |
          echo "Checking markdown files exist..."

          REQUIRED_DOCS=(
            "README.md"
            "QUICKSTART.md"
            "LICENSE"
            ".env.example"
            "ENCRYPTED_BACKUPS_GUIDE.md"
            "RESTORE_ON_BOOT.md"
            "BACKUP_PERFORMANCE.md"
            "UPDATE_STRATEGY.md"
          )

          for doc in "${REQUIRED_DOCS[@]}"; do
            if [ ! -f "$doc" ]; then
              echo "ERROR: Missing required file: $doc"
              exit 1
            fi
            echo "✓ Found: $doc"
          done

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for accidentally committed secrets
        run: |
          echo "Scanning for potential secrets..."

          # Check if .env exists (should not)
          if [ -f .env ]; then
            echo "ERROR: .env file found in repository!"
            exit 1
          fi

          # Check if google-credentials.json exists (should not)
          if [ -f google-credentials.json ]; then
            echo "ERROR: google-credentials.json found in repository!"
            exit 1
          fi

          # Check for any backup files
          if ls backups/*.sql* 2>/dev/null; then
            echo "ERROR: Backup files found in repository!"
            exit 1
          fi

          echo "✓ No secrets found"

      - name: Run Trivy security scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '0'
          severity: 'CRITICAL,HIGH'

  test-backup-script:
    name: Test Backup Script Logic
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r backup-service/requirements.txt

      - name: Test backup script imports
        run: |
          cd backup-service
          python -c "
          import backup
          import os
          import subprocess
          import datetime
          print('✓ All imports successful')
          "

      - name: Test encryption/decryption logic
        run: |
          # Test that openssl encryption works
          echo "test data" > test.txt

          # Encrypt
          openssl enc -aes-256-cbc \
            -salt -pbkdf2 -iter 100000 \
            -in test.txt \
            -out test.txt.enc \
            -pass pass:test_key_12345

          # Decrypt
          openssl enc -aes-256-cbc -d \
            -salt -pbkdf2 -iter 100000 \
            -in test.txt.enc \
            -out test.txt.dec \
            -pass pass:test_key_12345

          # Verify
          if diff test.txt test.txt.dec; then
            echo "✓ Encryption/decryption test passed"
          else
            echo "ERROR: Encryption/decryption failed"
            exit 1
          fi

          rm test.txt test.txt.enc test.txt.dec

  validate-systemd:
    name: Validate Systemd Services
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate systemd service files
        run: |
          echo "Checking systemd service files..."

          # Check syntax (basic validation)
          for service in limesurvey.service limesurvey-watchdog.service limesurvey-watchdog.timer; do
            if [ ! -f "$service" ]; then
              echo "ERROR: Missing $service"
              exit 1
            fi

            # Check for required sections
            grep -q "^\[Unit\]" "$service" || { echo "ERROR: Missing [Unit] in $service"; exit 1; }

            echo "✓ $service syntax looks valid"
          done

  integration-test:
    name: Integration Test (Dry Run)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create test environment
        run: |
          cp .env.example .env
          sed -i 's/your_secure_root_password_here/test_root_pass_123/g' .env
          sed -i 's/your_secure_password_here/test_pass_123/g' .env
          sed -i 's/your_secure_db_password_here/test_db_pass_123/g' .env
          sed -i 's/your_admin_password_here/test_admin_pass_123/g' .env
          sed -i 's/admin@example.com/test@example.com/g' .env
          sed -i 's/https:\/\/your-domain.com/https:\/\/test.example.com/g' .env
          sed -i 's/your_google_drive_folder_id_here/test_folder_id/g' .env
          sed -i 's/your_cloudflare_tunnel_token_here/test_token/g' .env

          # Create dummy credentials
          echo '{"type":"service_account","project_id":"test"}' > google-credentials.json

      - name: Build and start core services (without Cloudflare)
        run: |
          # Start only database and LimeSurvey (others need real credentials)
          docker compose up -d database

          # Wait for database
          sleep 30

          # Check database is running
          docker compose ps database
          docker compose logs database

      - name: Test database connectivity
        run: |
          # Try to connect to database
          docker compose exec -T database mysql -uroot -ptest_root_pass_123 -e "SELECT VERSION();"

          if [ $? -eq 0 ]; then
            echo "✓ Database connection successful"
          else
            echo "ERROR: Could not connect to database"
            exit 1
          fi

      - name: Cleanup
        if: always()
        run: |
          docker compose down -v
          rm -f .env google-credentials.json

  report-status:
    name: Report CI Status
    runs-on: ubuntu-latest
    needs: [validate-docker-compose, validate-scripts, validate-python, validate-documentation, security-scan, test-backup-script, validate-systemd, integration-test]
    if: always()

    steps:
      - name: Check all jobs passed
        run: |
          echo "CI Pipeline Complete!"
          echo "All validation checks finished."
